You are tasked with implementing a File Transfer Protocol (FTP) server and client in the C programming language using Transmission Control Protocol (TCP). The FTP system should support basic file transfer operations, including put, get, close, cd (change directory), and ls (list directory contents) from the client to the server as follows:
1. put <file_name>: Upload a file from the client to the server in the current directory.
2. get <file_name>: Download a file from the server to the client in the current directory.
3. close: Close the connection with the client.
4. cd <directory_name>: Change the current directory on the server.
5. ls: List all the contents of the current directory on the server available to the client.
Part - I (Server Implementation)
Implement an FTP server that can handle file transfer requests from multiple clients concurrently. The server should support the commands
Requirements:
1. The server should bind to a specific port to listen for incoming FTP commands.
2. The server should handle multiple concurrent connections.
Part - II (Client Implementation)
Implement an FTP client that allows users to connect to the FTP server and perform file transfer operations. The client should support the commands
Requirements:
1. Implement a mechanism to establish a connection with the server (using the known port).
2. Implement a simple user interface prompt (ftp_client>) for the client to enter FTP
commands.
3. Display appropriate messages for success or failure of file operations.
You are tasked with implementing a File Transfer Protocol (FTP) server and client in the C programming language using Transmission Control Protocol (TCP). The FTP system should support basic file transfer operations, including put, get, close, cd (change directory), and ls (list directory contents) from the client to the server as follows:
1. put <file_name>: Upload a file from the client to the server in the current directory.
2. get <file_name>: Download a file from the server to the client in the current directory.
3. close: Close the connection with the client.
4. cd <directory_name>: Change the current directory on the server.
5. ls: List all the contents of the current directory on the server available to the client.
Part - I (Server Implementation)
Implement an FTP server that can handle file transfer requests from multiple clients concurrently. The server should support the commands
Requirements:
1. The server should bind to a specific port to listen for incoming FTP commands.
2. The server should handle multiple concurrent connections.
Part - II (Client Implementation)
Implement an FTP client that allows users to connect to the FTP server and perform file transfer operations. The client should support the commands
Requirements:
1. Implement a mechanism to establish a connection with the server (using the known port).
2. Implement a simple user interface prompt (ftp_client>) for the client to enter FTP
commands.
3. Display appropriate messages for success or failure of file operations.226 Transfer complete

You are tasked with implementing a File Transfer Protocol (FTP) server and client in the C programming language using Transmission Control Protocol (TCP). The FTP system should support basic file transfer operations, including put, get, close, cd (change directory), and ls (list directory contents) from the client to the server as follows:
1. put <file_name>: Upload a file from the client to the server in the current directory.
2. get <file_name>: Download a file from the server to the client in the current directory.
3. close: Close the connection with the client.
4. cd <directory_name>: Change the current directory on the server.
5. ls: List all the contents of the current directory on the server available to the client.
Part - I (Server Implementation)
Implement an FTP server that can handle file transfer requests from multiple clients concurrently. The server should support the commands
Requirements:
1. The server should bind to a specific port to listen for incoming FTP commands.
2. The server should handle multiple concurrent connections.
Part - II (Client Implementation)
Implement an FTP client that allows users to connect to the FTP server and perform file transfer operations. The client should support the commands
Requirements:
1. Implement a mechanism to establish a connection with the server (using the known port).
2. Implement a simple user interface prompt (ftp_client>) for the client to enter FTP
commands.
3. Display appropriate messages for success or failure of file operations.226 Transfer complete
